#!/bin/bash

set -e

clone_mtime() {
  repo=$1
  dir=$2

  git clone $1 $2
  pushd $2

  [ -n "$BRANCH" ] && git checkout $BRANCH || true

  /usr/bin/git-restore-mtime $2

  popd
}

# parse arguments
while [[ $# > 0 ]]; do
  key="$1"; shift

  case $key in
    --branch)
      BRANCH="$1"; shift
      ;;
    --latest)
      LATEST=yes
      ;;
  esac
done

# generate date tag
tag=$(date +%Y%m%d%H%M%S)

# if using a branch add to tag and dont allow latest
[ -n "$BRANCH" ] && tag=$tag-$BRANCH
[ -n "$BRANCH" ] && LATEST=no

# setup temp dir
tmp=$(mktemp -d -t release.XXXXX)
export GOPATH=$tmp/go

docker login -e $DOCKER_EMAIL -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

clone_mtime https://github.com/convox/rack $tmp/rack
clone_mtime https://github.com/convox/registry $tmp/registry

cd $tmp/rack/api
docker build -t convox/api:$tag .

cd $tmp/registry
docker build -t convox/registry:$tag .

docker push convox/api:$tag
docker push convox/registry:$tag

go get github.com/convox/rack/api
cd $GOPATH/src/github.com/convox/rack/api
[ -n "$BRANCH" ] && git checkout $BRANCH || true
make release VERSION=$tag LATEST=$LATEST

V=$(version create $tag | tee)

if [ "${LATEST}" == "yes" ]; then
  docker tag -f convox/api:$tag convox/api:latest
  docker tag -f convox/registry:$tag convox/registry:latest

  docker push convox/api:latest
  docker push convox/registry:latest

  V=$(version -publish update $tag | tee)
fi

echo "kernel released: $V"

curl -s -X POST -d "payload={\"text\":\"kernel released: $V\"}" $SLACK_WEBHOOK_URL

ci $tag
